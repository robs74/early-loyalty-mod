include("include/SOVIETInstructions.txt");
include("settings.txt");
include("include/helper_functions.txt");

defineVariable(int, n);
defineVariable(int, i);
defineVariable(int, j);
defineVariable(int, k);
defineVariable(int, l);
defineVariable(int, worker_id);
defineVariable(Person, worker);
defineVariable(Building, building);
defineVariable(int, population);
defineVariable(int, is_active);

defineVariable(int, editors);
defineVariable(float, editors_total_loyalty);
defineVariable(float, editors_avg_loyalty);
defineVariable(float, newspaper_efficiency);
defineVariable(float, negative_newspaper_efficiency);
defineVariable(int, can_read);
defineVariable(float, culture);
defineVariable(char, active_radio);
defineVariable(char, active_tv);
defineVariable(float, individual_effectiveness);

defineVariable(int, spo); //spo - secret police officer(s)
defineVariable(float, spo_total_loyalty);
defineVariable(float, spo_avg_loyalty);
defineVariable(float, censorship_efficiency);

defineVariable(int, cinemas_workers);
defineVariable(int, building_workers);
defineVariable(float, building_total_loyalty);
defineVariable(float, building_avg_loyalty);
defineVariable(float, target_loyalty);
defineVariable(float, game_time);
defineVariable(float, game_time_prev);
defineVariable(int, window_id);
defineVariable(int, window_exists);
defineVariable(Window, window);
defineVariable(int, clicked_object_id);
defineArray(char[300], text);
defineVariable(char, NEWLINE);
defineVariable(float, newspaper_efficiency_perc);
defineVariable(float, censorship_efficiency_perc);
defineVariable(int, editors_required);
defineVariable(int, spo_required);

defineVariable(GameSetting, game);
defineVariable(float, time_factor);
defineVariable(int, readers);

defineFunction(UpdateState, void)
{
	Building_GetNumberOfBuildings(n);
	population = 0;
	editors = 0;
	editors_total_loyalty = 0.0;
	cinemas_workers = 0;
	spo = 0;
	active_radio = 0;
	active_tv = 0;
	for (i=0, i<n, i=i+1)
	{
		Building_IsOldTownActive(i, is_active);
		building.GetDataByIndex(i);
		if(building.nType ? BUILDINGTYPE_BROADCAST & building.nSubType ? BUILDINGSUBTYPE_RADIO & building.nWorkersNum > 0 & building.fPercFinished > 0.9999)
		{
			active_radio = 1;
		}
		if(building.nType ? BUILDINGTYPE_BROADCAST & building.nSubType ? BUILDINGSUBTYPE_TELEVISION & building.nWorkersNum > 0 & building.fPercFinished > 0.9999)
		{
			active_tv = 1;
		}
		if(building.nType ? BUILDINGTYPE_KINO & building.fPercFinished > 0.9999)
		{
			cinemas_workers = cinemas_workers + building.nWorkersNum;
		}
		if(building.nType ? BUILDINGTYPE_SECRET_POLICE & building.nVehiclesWorkingNum > 0)
		{
			spo = spo + building.nWorkersNum;
			for (j=0, j<building.nWorkersNum, j=j+1)
			{
				Building_Workers_GetID(i, j, worker_id);
				worker.GetDataByIndex(worker_id);
				spo_total_loyalty = spo_total_loyalty + worker.fStatusSoviet;
			}
		}
		if(building.nType ? BUILDINGTYPE_LIVING & building.fPercFinished > 0.9999 & is_active * is_active ? 1)
		{
			population = population + building.nWorkersNum;
		}
		//newspaper is a secret police office without any vehicles
		if(building.nType ? BUILDINGTYPE_SECRET_POLICE & building.nVehiclesWorkingNum < 1 & building.fPercFinished > 0.9999)
		{
			editors = editors + building.nWorkersNum;
			for (j=0, j<building.nWorkersNum, j=j+1)
			{
				Building_Workers_GetID(i, j, worker_id);
				worker.GetDataByIndex(worker_id);
				editors_total_loyalty = editors_total_loyalty + worker.fStatusSoviet;
			}
		}
	}
	returnVoid();
}

defineFunction(CalculateEfficiency, void)
{
	editors_avg_loyalty = 0.0;
	newspaper_efficiency = 0.0;
	newspaper_efficiency_perc = 0.0;
	negative_newspaper_efficiency = 0.0;
	censorship_efficiency = 0.0;
	censorship_efficiency_perc = 0.0;
	spo_avg_loyalty = 0.0;
	editors_required = population * 1.0 / EDITOR_EFFICIENCY + 1.0;
	spo_required = cinemas_workers * 1.0 / SPO_EFFICIENCY + 1.0;
	if(editors > 0)
	{
		editors_avg_loyalty = editors_total_loyalty / editors;
		newspaper_efficiency_perc = MinFloat(editors * EDITOR_EFFICIENCY / population * 100.0, 100.0);
		newspaper_efficiency = MinFloat(editors * EDITOR_EFFICIENCY / population, 1.0) * NEWSPAPER_STRENGTH;
		negative_newspaper_efficiency = (2.0 - MaxFloat(editors * EDITOR_EFFICIENCY / population, 1.0)) * editors_avg_loyalty * NEWSPAPER_STRENGTH;
	}
	if(spo > 0)
	{
		spo_avg_loyalty = spo_total_loyalty / spo;
		censorship_efficiency = 1.0;
		censorship_efficiency_perc = 100.0;
		if(cinemas_workers > 0)
		{
			censorship_efficiency_perc = MinFloat(spo * SPO_EFFICIENCY / cinemas_workers * 100.0, 100.0);
			censorship_efficiency = MinFloat(spo * SPO_EFFICIENCY / cinemas_workers, 1.0);
		}
	}
	Window_GetLastWindow(window_id);
	if(window_id ? -1)
	{
		clicked_object_id = -1;
	}
	else()
	{
		window.GetDataByIndex(window_id);
		if (window.nValidRead)
		{
			if (window.nReferenceObjectType ? SOVIET_OBJECT_BUILDING & !(clicked_object_id ? window.nRefObjectIndex))
			{
				clicked_object_id = window.nRefObjectIndex;
				if(window.nReferenceObjectType ? SOVIET_OBJECT_BUILDING)
				{
					building.GetDataByIndex(clicked_object_id);
					Scenario_WindowExists(window_exists);
					if(building.nType ? BUILDINGTYPE_SECRET_POLICE & building.nVehiclesWorkingNum < 1 & building.fPercFinished > 0.9999 & !window_exists)
					{
						strcpy(text, "");
						
						strcat(text, "Newspaper editors: ");
						strcat(text, editors);
						strcat(text, NEWLINE);
						
						strcat(text, "Editors required: ");
						strcat(text, editors_required);
						strcat(text, NEWLINE); 
						
						strcat(text, "Newspaper efficiency: ");
						strcat(text, newspaper_efficiency_perc);
						strcat(text, "%");
						strcat(text, NEWLINE); 
						
						strcat(text, "People currently reading our newspaper: ");
						strcat(text, readers);
						strcat(text, NEWLINE); 
												
						strcat(text, "Number of people reachable by the newspaper: ");
						strcat(text, population);
						strcat(text, NEWLINE); 
						
						strcat(text, "Secret police officers: ");
						strcat(text, spo);
						strcat(text, NEWLINE);
						
						strcat(text, "Secret police officers required: ");
						strcat(text, spo_required);
						strcat(text, NEWLINE);
						
						strcat(text, "Censorship efficiency: ");
						strcat(text, censorship_efficiency_perc);
						strcat(text, "%");
						
						Scenario_WindowWithImageLeft("Press and shows", text, "newspaper_icon.png", 3);
					}
				}
			}
		}
	}
	if(DISABLE_OBJECTIVES ? 0 & (NEWSPAPER_STRENGTH > 0.0 | SHOW_STRENGTH > 0.0))
	{
		Objective_Remove("press");
		Objectives_CreateNewString("press", "Press and shows");
		Objective_AddRequirement("press", population * 1.0 / EDITOR_EFFICIENCY + 1.0, "newspaper_icon.png");
		Objective_UpdateRequirement("press", 0, editors * 1.0);
		if(SHOW_STRENGTH > 0.0)
		{
			Objective_AddRequirement("press", cinemas_workers * 1.0 / SPO_EFFICIENCY + 1.0, "editor/status_culture.png");
			Objective_UpdateRequirement("press", 1, spo * 1.0);
		}
	}
	returnVoid();
}

defineFunction(ReadNewspaper, void, int:id)
{
	worker.GetDataByIndex(id);
	can_read = 1.0;
	if(game.EducationLevel ? 0)
	{
		can_read = worker.fEducation - 1.0;
	}
	individual_effectiveness = 1.0;
	if(worker.fStatusElectronic > 2.0 & active_tv ? 1)
	{
		individual_effectiveness = 0.25;
	}
	elseif(worker.fStatusElectronic > 1.0 & active_radio ? 1)
	{
		individual_effectiveness = 0.5;
	}
	if(can_read > 0.0 & worker.bIsHome ? 1)
	{
		readers = readers + 1;
		if(worker.fStatusSoviet < LOYALTY_MAX_NEWSPAPER)
		{
			//increase loyalty
			Person_SetStatus(id, 3, Clamp(worker.fStatusSoviet + newspaper_efficiency * editors_avg_loyalty * individual_effectiveness * LOYALTY_FACTOR * time_factor / 24.0, 0.0, LOYALTY_MAX_NEWSPAPER)); //24 - approximate number of ticks per day
		}
		if(culture > 0.0 & worker.fStatusCulture < LOYALTY_MAX_NEWSPAPER + culture)
		{
			//increase culture, the more the more efficient is your newspaper
			Person_SetStatus(id, 5, Clamp(worker.fStatusCulture + newspaper_efficiency * individual_effectiveness * culture * time_factor / 120.0, 0.0, LOYALTY_MAX_NEWSPAPER + culture)); //24 * 5 - scaling factor
		}
		elseif(culture < 0.0)
		{
			//decrease culture, the more the less efficient is your newspaper
			Person_SetStatus(id, 5, Clamp(worker.fStatusCulture + negative_newspaper_efficiency * individual_effectiveness * culture * time_factor / 30.0, 0.0, 1.0));
		}
	}
	returnVoid();
}

defineFunction(Propagandise, void, int:id2, float: drift, float:max_loyalty, float: censorship, float:ed)
{
	building.GetDataByIndex(id2);
	building_total_loyalty = 0.0;
	building_workers = 0;
	building_avg_loyalty = 0.0;
	for(j=0, j < building.nWorkersNum, j=j+1)
	{
		Building_Workers_GetID(id2, j, worker_id);
		worker.GetDataByIndex(worker_id);
		if(worker.fEducation > ed)
		{
			building_workers = building_workers + 1;
			building_total_loyalty = building_total_loyalty + worker.fStatusSoviet;
		}
	}
	if(building_workers > 0)
	{
		building_avg_loyalty = building_total_loyalty / building_workers;
	}
	target_loyalty = censorship_efficiency * censorship * spo_avg_loyalty + (1.0 - censorship_efficiency * censorship) * building_avg_loyalty;
	target_loyalty = MaxFloat(target_loyalty, building_avg_loyalty);
	for (j=0, j<building.nWorkersSecondaryNum, j=j+1)
	{
		Building_WorkersSecondary_GetID(id2, j, worker_id);
		worker.GetDataByIndex(worker_id);
		if(worker.fStatusSoviet < MinFloat(max_loyalty, target_loyalty))
		{
			//increase loyalty
			Person_SetStatus(worker_id, 3, Clamp(worker.fStatusSoviet + drift / 4.0, 0.0, 1.0)); // 4.0 - because of the increased frequency of ticks
		}
		elseif(worker.fStatusSoviet > target_loyalty)
		{
			//decrease loyalty
			Person_SetStatus(worker_id, 3, Clamp(worker.fStatusSoviet - drift / 4.0, 0.0, 1.0));
		}
	}
	returnVoid();
}

defineFunction(main, void)
{
	InitConstants();
	InitSettings();
    NEWLINE = 10; // ASCII LF
	//check correctness of the constants in the settings file
	LOYALTY_FACTOR = Clamp(LOYALTY_FACTOR, 0.0, 1.0);
	EDITOR_EFFICIENCY = MaxFloat(EDITOR_EFFICIENCY, 1.0);
	NEWSPAPER_STRENGTH = Clamp(NEWSPAPER_STRENGTH, 0.0, 1.0);
	SHOW_STRENGTH = Clamp(SHOW_STRENGTH, 0.0, 1.0);
	SCHOOL_STRENGTH = Clamp(SCHOOL_STRENGTH, 0.0, 1.0);
	UNIVERSITY_STRENGTH = Clamp(UNIVERSITY_STRENGTH, 0.0, 1.0);
	ORPHANAGE_STRENGTH = Clamp(ORPHANAGE_STRENGTH, 0.0, 1.0);
	PRISON_STRENGTH = Clamp(PRISON_STRENGTH, 0.0, 1.0);
	SPO_EFFICIENCY = MaxFloat(SPO_EFFICIENCY, 1.0);
	LOYALTY_MAX_NEWSPAPER = Clamp(LOYALTY_MAX_NEWSPAPER, 0.0, 1.0);
	LOYALTY_MAX_SHOW = Clamp(LOYALTY_MAX_SHOW, 0.0, 1.0);
	LOYALTY_MAX_SCHOOL = Clamp(LOYALTY_MAX_SCHOOL, 0.0, 1.0);
	LOYALTY_MAX_UNIVERSITY = Clamp(LOYALTY_MAX_SHOW, 0.0, 1.0);
	LOYALTY_MAX_ORPHANAGE = Clamp(LOYALTY_MAX_NEWSPAPER, 0.0, 1.0);
	LOYALTY_MAX_PRISON = Clamp(LOYALTY_MAX_SHOW, 0.0, 1.0);
	
	culture = 0.75 - LOYALTY_FACTOR;
	Script_GetGameTime(game_time);
	Script_GetGameTime(game_time_prev);
	while(1 ? 1)
	{
		game.GetCurrentGameSettigns();
		Script_GetGameTime(game_time);
		if(game_time > game_time_prev + 2.0)
		{
			Script_EnterCriticalSection();
			time_factor = (game_time - game_time_prev) / 2.5;
			UpdateState();
			CalculateEfficiency();
			readers = 0;
			for (i=0, i<n, i=i+1)
			{
				building.GetDataByIndex(i);
				Building_IsOldTownActive(i, is_active);
				if(building.nType ? BUILDINGTYPE_LIVING & is_active*is_active ? 1 & building.fPercFinished > 0.9999)
				{
					for (j=0, j<building.nWorkersNum, j=j+1)
					{
						Building_Workers_GetID(i, j, worker_id);
						ReadNewspaper(worker_id);
					}
				}
				if(building.nType ? BUILDINGTYPE_KINO & building.fPercFinished > 0.9999)
				{
					Propagandise(i, SHOW_STRENGTH, LOYALTY_MAX_SHOW, 1.0, 0.0);
				}
				if(building.nType ? BUILDINGTYPE_SCHOOL & building.fPercFinished > 0.9999)
				{
					Propagandise(i, SCHOOL_STRENGTH, LOYALTY_MAX_SCHOOL, 0.0, 1.999);
				}
				if(building.nType ? BUILDINGTYPE_UNIVERSITY & building.fPercFinished > 0.9999)
				{
					Propagandise(i, UNIVERSITY_STRENGTH, LOYALTY_MAX_UNIVERSITY, 0.0, 1.999);
				}
				if(building.nType ? BUILDINGTYPE_ORPHANAGE & building.fPercFinished > 0.9999)
				{
					Propagandise(i, ORPHANAGE_STRENGTH, LOYALTY_MAX_ORPHANAGE, 0.0, 0.0);
				}
				if(building.nType ? BUILDINGTYPE_PRISON & building.fPercFinished > 0.9999)
				{
					Propagandise(i, PRISON_STRENGTH, LOYALTY_MAX_PRISON, 0.0, 0.0);
				}
			}
			game_time_prev = game_time;
			Script_LeaveCriticalSection();
			Script_Sleep(2.5);
		}
	}
	end();
}
